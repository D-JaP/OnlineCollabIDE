{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzung\\\\project\\\\cloudy\\\\client\\\\cloudy_ide\\\\src\\\\CodeEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { css } from '@codemirror/lang-css';\nimport { html } from '@codemirror/lang-html';\nimport * as Y from 'yjs';\nimport { EditorState } from \"@codemirror/state\";\nimport { EditorView, keymap } from \"@codemirror/view\";\nimport { basicSetup } from 'codemirror';\nimport { githubLight } from '@ddietr/codemirror-themes/github-light';\nimport { githubDark } from '@ddietr/codemirror-themes/github-dark';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodeEditor(_ref) {\n  _s();\n  let {\n    value,\n    theme,\n    lang,\n    onChange\n  } = _ref;\n  const editorRef = useRef();\n  var cm_lang;\n  var cm_theme;\n  if (lang == \"javascript\") {\n    cm_lang = javascript();\n  } else if (lang == \"html\") {\n    cm_lang = html();\n  } else if (lang == \"css\") {\n    cm_lang = css();\n  }\n  if (theme == 'light') {\n    cm_theme = githubLight;\n  } else if (theme == 'dark') {\n    cm_theme = githubDark;\n  }\n\n  // \n  const parentElement = document.getElementById(\"editor-container\");\n  const view = new EditorView({\n    doc: \"Hello, world!\",\n    parent: editorRef.current,\n    extensions: [basicSetup, cm_lang, cm_theme, EditorView.updateListener.of(_ref2 => {\n      var _state$doc$text;\n      let {\n        state\n      } = _ref2;\n      onChange({\n        target: {\n          value: (_state$doc$text = state.doc.text) === null || _state$doc$text === void 0 ? void 0 : _state$doc$text.join('\\n')\n        }\n      });\n    })]\n  });\n  editorRef.current = view;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"editor-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 12\n  }, this);\n}\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useRef","useEffect","javascript","css","html","Y","EditorState","EditorView","keymap","basicSetup","githubLight","githubDark","jsxDEV","_jsxDEV","CodeEditor","_ref","_s","value","theme","lang","onChange","editorRef","cm_lang","cm_theme","parentElement","document","getElementById","view","doc","parent","current","extensions","updateListener","of","_ref2","_state$doc$text","state","target","text","join","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dzung/project/cloudy/client/cloudy_ide/src/CodeEditor.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\r\nimport { javascript } from '@codemirror/lang-javascript';\r\nimport { css } from '@codemirror/lang-css'\r\nimport { html } from '@codemirror/lang-html'\r\nimport * as Y from 'yjs'\r\nimport {EditorState} from \"@codemirror/state\"\r\nimport {EditorView, keymap} from \"@codemirror/view\"\r\nimport { basicSetup } from 'codemirror';\r\nimport {githubLight} from '@ddietr/codemirror-themes/github-light'\r\nimport {githubDark} from '@ddietr/codemirror-themes/github-dark'\r\n\r\n\r\nfunction CodeEditor({value, theme, lang, onChange}) {\r\n    const editorRef = useRef();\r\n    var cm_lang ;\r\n    var cm_theme ;\r\n    if (lang == \"javascript\") {\r\n        cm_lang = javascript();\r\n    }\r\n    else if (lang  == \"html\") {\r\n        cm_lang = html();\r\n    }\r\n    else if (lang == \"css\") {\r\n        cm_lang = css();\r\n    }\r\n\r\n    if (theme == 'light'){\r\n        cm_theme = githubLight;\r\n    }\r\n    else if (theme == 'dark') {\r\n        cm_theme = githubDark;\r\n    }\r\n\r\n    // \r\n    const parentElement = document.getElementById(\"editor-container\");\r\n\r\n\r\n    const view = new EditorView({\r\n        doc: \"Hello, world!\",\r\n        parent: editorRef.current,\r\n        extensions: [basicSetup,\r\n            cm_lang,\r\n            cm_theme,\r\n            EditorView.updateListener.of(({ state }) => {\r\n                onChange({ target: { value: state.doc.text?.join('\\n') } });\r\n            })\r\n        ]\r\n    });\r\n\r\n    editorRef.current = view;\r\n    \r\n\r\n    return <div id=\"editor-container\" />;\r\n\r\n}\r\n\r\nexport default CodeEditor"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,GAAG,QAAQ,sBAAsB;AAC1C,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,OAAO,KAAKC,CAAC,MAAM,KAAK;AACxB,SAAQC,WAAW,QAAO,mBAAmB;AAC7C,SAAQC,UAAU,EAAEC,MAAM,QAAO,kBAAkB;AACnD,SAASC,UAAU,QAAQ,YAAY;AACvC,SAAQC,WAAW,QAAO,wCAAwC;AAClE,SAAQC,UAAU,QAAO,uCAAuC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGhE,SAASC,UAAUA,CAAAC,IAAA,EAAiC;EAAAC,EAAA;EAAA,IAAhC;IAACC,KAAK;IAAEC,KAAK;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAAL,IAAA;EAC9C,MAAMM,SAAS,GAAGrB,MAAM,EAAE;EAC1B,IAAIsB,OAAO;EACX,IAAIC,QAAQ;EACZ,IAAIJ,IAAI,IAAI,YAAY,EAAE;IACtBG,OAAO,GAAGpB,UAAU,EAAE;EAC1B,CAAC,MACI,IAAIiB,IAAI,IAAK,MAAM,EAAE;IACtBG,OAAO,GAAGlB,IAAI,EAAE;EACpB,CAAC,MACI,IAAIe,IAAI,IAAI,KAAK,EAAE;IACpBG,OAAO,GAAGnB,GAAG,EAAE;EACnB;EAEA,IAAIe,KAAK,IAAI,OAAO,EAAC;IACjBK,QAAQ,GAAGb,WAAW;EAC1B,CAAC,MACI,IAAIQ,KAAK,IAAI,MAAM,EAAE;IACtBK,QAAQ,GAAGZ,UAAU;EACzB;;EAEA;EACA,MAAMa,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC;EAGjE,MAAMC,IAAI,GAAG,IAAIpB,UAAU,CAAC;IACxBqB,GAAG,EAAE,eAAe;IACpBC,MAAM,EAAER,SAAS,CAACS,OAAO;IACzBC,UAAU,EAAE,CAACtB,UAAU,EACnBa,OAAO,EACPC,QAAQ,EACRhB,UAAU,CAACyB,cAAc,CAACC,EAAE,CAACC,KAAA,IAAe;MAAA,IAAAC,eAAA;MAAA,IAAd;QAAEC;MAAM,CAAC,GAAAF,KAAA;MACnCd,QAAQ,CAAC;QAAEiB,MAAM,EAAE;UAAEpB,KAAK,GAAAkB,eAAA,GAAEC,KAAK,CAACR,GAAG,CAACU,IAAI,cAAAH,eAAA,uBAAdA,eAAA,CAAgBI,IAAI,CAAC,IAAI;QAAE;MAAE,CAAC,CAAC;IAC/D,CAAC,CAAC;EAEV,CAAC,CAAC;EAEFlB,SAAS,CAACS,OAAO,GAAGH,IAAI;EAGxB,oBAAOd,OAAA;IAAK2B,EAAE,EAAC;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAExC;AAAC5B,EAAA,CA1CQF,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AA4CnB,eAAeA,UAAU;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}