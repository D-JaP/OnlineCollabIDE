{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dzung\\\\project\\\\cloudy\\\\client\\\\cloudy_ide\\\\src\\\\CodeEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { css } from '@codemirror/lang-css';\nimport { html } from '@codemirror/lang-html';\nimport * as Y from 'yjs';\nimport { EditorState } from \"@codemirror/state\";\nimport { EditorView, ViewUpdate } from \"@codemirror/view\";\nimport { basicSetup } from 'codemirror';\nimport { githubLight } from '@ddietr/codemirror-themes/github-light';\nimport { githubDark } from '@ddietr/codemirror-themes/github-dark';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodeEditor(_ref) {\n  _s();\n  let {\n    value,\n    theme,\n    lang,\n    onChange\n  } = _ref;\n  // setup code\n  var cm_lang;\n  var cm_theme;\n  if (lang == \"javascript\") {\n    cm_lang = javascript();\n  } else if (lang == \"html\") {\n    cm_lang = html();\n  } else if (lang == \"css\") {\n    cm_lang = css();\n  }\n  if (theme == 'light') {\n    cm_theme = githubLight;\n  } else if (theme == 'dark') {\n    cm_theme = githubDark;\n  }\n  const editorRef = useRef();\n  const view = useRef();\n\n  // \n  const parentElement = document.getElementById(\"editor-container\");\n  useEffect(() => {\n    view.current = new EditorView({\n      state: EditorState.create({\n        doc: value,\n        extensions: [basicSetup, cm_lang, cm_theme, EditorView.updateListener.of(_ref2 => {\n          var _state$doc$text;\n          let {\n            state\n          } = _ref2;\n          onChange({\n            target: {\n              value: (_state$doc$text = state.doc.text) === null || _state$doc$text === void 0 ? void 0 : _state$doc$text.join(\"\\n\")\n            }\n          });\n          console.log(state.changes.toString());\n        })]\n      }),\n      parent: editorRef.current\n    });\n    return () => {\n      view.current.destroy();\n      view.current = null;\n    };\n  }, []);\n\n  // useEffect(() => {\n  //     if (view.current && view.current.state.doc.toString() !== value) {\n  //       view.current.dispatch({\n  //         changes: { from: 0, to: view.current.state.doc.length, insert: \"\" }\n  //       });\n  //     }\n  //   }, [value]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef,\n    id: \"editor-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 12\n  }, this);\n}\n_s(CodeEditor, \"f8mbVOZoasbj9wxtrka9+aWuK+U=\");\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useRef","useEffect","javascript","css","html","Y","EditorState","EditorView","ViewUpdate","basicSetup","githubLight","githubDark","jsxDEV","_jsxDEV","CodeEditor","_ref","_s","value","theme","lang","onChange","cm_lang","cm_theme","editorRef","view","parentElement","document","getElementById","current","state","create","doc","extensions","updateListener","of","_ref2","_state$doc$text","target","text","join","console","log","changes","toString","parent","destroy","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dzung/project/cloudy/client/cloudy_ide/src/CodeEditor.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\r\nimport { javascript } from '@codemirror/lang-javascript';\r\nimport { css } from '@codemirror/lang-css'\r\nimport { html } from '@codemirror/lang-html'\r\nimport * as Y from 'yjs'\r\nimport {EditorState} from \"@codemirror/state\"\r\nimport {EditorView, ViewUpdate} from \"@codemirror/view\"\r\nimport { basicSetup } from 'codemirror';\r\nimport {githubLight} from '@ddietr/codemirror-themes/github-light'\r\nimport {githubDark} from '@ddietr/codemirror-themes/github-dark'\r\n\r\n\r\nfunction CodeEditor({value, theme, lang, onChange}) {\r\n    // setup code\r\n    var cm_lang ;\r\n    var cm_theme ;\r\n    if (lang == \"javascript\") {\r\n        cm_lang = javascript();\r\n    }\r\n    else if (lang  == \"html\") {\r\n        cm_lang = html();\r\n    }\r\n    else if (lang == \"css\") {\r\n        cm_lang = css();\r\n    }\r\n\r\n    if (theme == 'light'){\r\n        cm_theme = githubLight;\r\n    }\r\n    else if (theme == 'dark') {\r\n        cm_theme = githubDark;\r\n    }\r\n\r\n    const editorRef = useRef();\r\n    const view = useRef();\r\n\r\n    \r\n    // \r\n    const parentElement = document.getElementById(\"editor-container\");\r\n\r\n    useEffect(() => {\r\n        view.current = new EditorView({\r\n            state: EditorState.create({\r\n                doc: value,\r\n                extensions: [\r\n                    basicSetup,\r\n                    cm_lang,\r\n                    cm_theme,\r\n                    EditorView.updateListener.of(({ state }) => {\r\n                        onChange({ target: { value: state.doc.text?.join(\"\\n\") } });\r\n                        console.log(state.changes.toString());\r\n                    }),\r\n                ]\r\n            }),\r\n            parent: editorRef.current,\r\n        });\r\n        return () => {\r\n            view.current.destroy();\r\n            view.current = null;\r\n        }\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     if (view.current && view.current.state.doc.toString() !== value) {\r\n    //       view.current.dispatch({\r\n    //         changes: { from: 0, to: view.current.state.doc.length, insert: \"\" }\r\n    //       });\r\n    //     }\r\n    //   }, [value]);\r\n\r\n    return <div ref={editorRef} id=\"editor-container\" />;\r\n\r\n}\r\n\r\nexport default CodeEditor"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,GAAG,QAAQ,sBAAsB;AAC1C,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,OAAO,KAAKC,CAAC,MAAM,KAAK;AACxB,SAAQC,WAAW,QAAO,mBAAmB;AAC7C,SAAQC,UAAU,EAAEC,UAAU,QAAO,kBAAkB;AACvD,SAASC,UAAU,QAAQ,YAAY;AACvC,SAAQC,WAAW,QAAO,wCAAwC;AAClE,SAAQC,UAAU,QAAO,uCAAuC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGhE,SAASC,UAAUA,CAAAC,IAAA,EAAiC;EAAAC,EAAA;EAAA,IAAhC;IAACC,KAAK;IAAEC,KAAK;IAAEC,IAAI;IAAEC;EAAQ,CAAC,GAAAL,IAAA;EAC9C;EACA,IAAIM,OAAO;EACX,IAAIC,QAAQ;EACZ,IAAIH,IAAI,IAAI,YAAY,EAAE;IACtBE,OAAO,GAAGnB,UAAU,EAAE;EAC1B,CAAC,MACI,IAAIiB,IAAI,IAAK,MAAM,EAAE;IACtBE,OAAO,GAAGjB,IAAI,EAAE;EACpB,CAAC,MACI,IAAIe,IAAI,IAAI,KAAK,EAAE;IACpBE,OAAO,GAAGlB,GAAG,EAAE;EACnB;EAEA,IAAIe,KAAK,IAAI,OAAO,EAAC;IACjBI,QAAQ,GAAGZ,WAAW;EAC1B,CAAC,MACI,IAAIQ,KAAK,IAAI,MAAM,EAAE;IACtBI,QAAQ,GAAGX,UAAU;EACzB;EAEA,MAAMY,SAAS,GAAGvB,MAAM,EAAE;EAC1B,MAAMwB,IAAI,GAAGxB,MAAM,EAAE;;EAGrB;EACA,MAAMyB,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC;EAEjE1B,SAAS,CAAC,MAAM;IACZuB,IAAI,CAACI,OAAO,GAAG,IAAIrB,UAAU,CAAC;MAC1BsB,KAAK,EAAEvB,WAAW,CAACwB,MAAM,CAAC;QACtBC,GAAG,EAAEd,KAAK;QACVe,UAAU,EAAE,CACRvB,UAAU,EACVY,OAAO,EACPC,QAAQ,EACRf,UAAU,CAAC0B,cAAc,CAACC,EAAE,CAACC,KAAA,IAAe;UAAA,IAAAC,eAAA;UAAA,IAAd;YAAEP;UAAM,CAAC,GAAAM,KAAA;UACnCf,QAAQ,CAAC;YAAEiB,MAAM,EAAE;cAAEpB,KAAK,GAAAmB,eAAA,GAAEP,KAAK,CAACE,GAAG,CAACO,IAAI,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,IAAI,CAAC,IAAI;YAAE;UAAE,CAAC,CAAC;UAC3DC,OAAO,CAACC,GAAG,CAACZ,KAAK,CAACa,OAAO,CAACC,QAAQ,EAAE,CAAC;QACzC,CAAC,CAAC;MAEV,CAAC,CAAC;MACFC,MAAM,EAAErB,SAAS,CAACK;IACtB,CAAC,CAAC;IACF,OAAO,MAAM;MACTJ,IAAI,CAACI,OAAO,CAACiB,OAAO,EAAE;MACtBrB,IAAI,CAACI,OAAO,GAAG,IAAI;IACvB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAOf,OAAA;IAAKiC,GAAG,EAAEvB,SAAU;IAACwB,EAAE,EAAC;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AAExD;AAACnC,EAAA,CA5DQF,UAAU;AAAAsC,EAAA,GAAVtC,UAAU;AA8DnB,eAAeA,UAAU;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}